true if 1 = 1.
false if 1 = 2.

- X is 0 - X.

display X where writeln X.

as text X is term_to_atom X.

map F over Xs is map_built_in F Xs.
filter Xs with F is filter_built_in F Xs.

either P or Q holds for X if disjunction_built_in P Q X.

one of Ps holds for X if one_of_built_in Ps X.

number of characters in T is atom_length T.

only elements of List satisfying F is filter List with F.

call F on X is call_built_in F X.

call rule R on X is call_rule_built_in R X.

the X is X.
id X is X.

odd X if X = 2*K + 1.
even X if X = 2*K.

square root X is (Root^2) = X, Root.

A divides B if B = A*N.
A | B if A divides B.

list A may be
    empty |
    cons Head Tail has
        Head : A,
        Tail : list A.

-- Just a nice alias for cons
X :: Xs is cons X Xs.

prepend Head to Tail is cons Head Tail.

pair A B may be
    pair X and Y has X : A, Y : B.

fst (pair A and B) is A.
snd (pair A and B) is B.

list of length N is
    when N <= 0 then empty;
    default prepend NewElem to list of length (N - 1).

length of List is
    when List = cons H T then 1 + length of T;
    default 0.

N th element of List is
    when List = cons H T, N = 0 then H;
    when List = cons H T, N > 0 then (N-1) th element of T.

set index Idx of List to NewVal is
    when List = cons H T, Idx <= 0 then prepend NewVal to T;
    when List = cons H T, Idx > 0 then prepend H to set index (Idx - 1) of T to NewVal;
    default prepend NewVal to empty.

concat A with B is
    when A = cons H T then prepend H to concat T with B;
    default A = empty, B.

A ++ B is concat A with B.

flatten List is
    when List = cons H T then concat H with flatten T;
    default empty.

reverseAcc A Acc is
    when A = cons H T then reverseAcc T (cons H Acc);
    when A = empty then Acc.

reverse list A is reverseAcc A empty.

sum of List is
    when List = empty then 0;
    when List = cons H T then H + sum of T.

multiples of A in List is filter List with (A divides _).

formatHelper List is
    when List = cons H empty then (as text H) .. "]";
    when List = cons H T then (as text H) .. "," .. formatHelper T;
    default "]".

format list List is "[" .. formatHelper List.

range Low to High is
    when Low > High then empty;
    when Low <= High then cons Low (range (Low + 1) to High).

range from Low to High is range Low to High.
integers from Low to High is range Low to High.

zip A and B is
    when A = cons HA TA, B = cons HB TB then
        cons (pair HA and HB) (zip TA and TB);
    when A = empty then empty;
    when B = empty then empty.

zip with F A and B is
    when A = cons HA TA, B = cons HB TB then
        cons (call (call F on HA) on HB) (zip with F TA and TB);
    when A = empty then empty;
    when B = empty then empty.

-- The other zip functions are quite permissive, and don't care if the two lists have different lengths.
-- This one does.
zip same length F A and B is
    when A = cons HA TA, B = cons HB TB then
        cons (call (call F on HA) on HB) (zip same length F TA and TB);
    when A = empty, B = empty then empty;
    default false, empty.

max of A and B is
    when A > B then A;
    default B.

min of A and B is
    when A > B then A;
    default B.

maximum of List is
    when List = cons H empty then H;
    when List = cons H T then max of H and maximum of T.

minimum of List is
    when List = cons H empty then H;
    when List = cons H T then min of H and minimum of T.

find factor of N starting with X is
    when X divides N then X;
    default find factor of N starting with (X + 1).

factors of N is
    when N = 1 then empty;
    default
        Factor = find factor of N starting with 2,
        cons Factor factors of (N / Factor).

digits of N is
    when N < 10 then cons N empty;
    when N >= 10 then
        N = 10*Rest + Digit,
        Digit >= 0, Digit < 10,
        cons Digit digits of Rest.

palindrome List if reverse list List = List.
palindromic number N if palindrome digits of N.

pair X with each List is
    when List = cons H T then cons (pair X and H) (pair X with each T);
    default empty.

cartesian product of A and B is
    when A = cons H T then
        concat (pair H with each B) with cartesian product of T and B;
    when A = empty then empty.

pairs of A and B is cartesian product of A and B.

take N from List is
    when N > 0, List = cons H T then cons H (take (N - 1) from T);
    default empty.

drop N from List is
    when N > 0, List = cons H T then drop (N - 1) from T;
    default List.

product of List is
    when List = cons H T then H * (product of T);
    default 1.

element N of List starting with H is
    when N <= 0 then H;
    when List = cons X Rest then element (N - 1) of Rest starting with X;
    default H.

chunks of size L in List is
    when List = empty then empty;
    default cons (take L from List) (chunks of size L in drop L from List).

chunks of length L in List is chunks of size L in List.

List contains Element if
    when List = cons H T, H = Element then 1 = 1;
    when List = cons H T then T contains Element;
    default 1 = 2.

remove Element from List is
    when List = cons H T, H = Element then T;
    when List = cons H T then cons H (remove Element from T);
    default 1 = 2, empty.

mapping K V may be X |-> Y has X : K, Y : V.

X maps to Y is X |-> Y.

maybe A may be
    nothing |
    just X has X : A.

ordering may be equal | greater | less.

compare A to B is
    when A > B then greater;
    when A < B then less;
    default equal.

key in (K maps to V) is K.
value in (K maps to V) is V.

compare keys (K1 |-> V1) to (K2 |-> V2) is compare K1 to K2.
compare values (K1 |-> V1) to (K2 |-> V2) is compare V1 to V2.

get key Key from Map is
    Map contains (Key |-> V),
    V.

insert K V into Map is cons (K |-> V) Map.

remove key Key from Map is remove (Key |-> V) from Map.

increment key Key in Map is insert Key (V + 1) into (remove (Key |-> V) from Map).

max key at least M1 in Map is
    when Map = cons M2 Assocs, compare keys M2 to M1 = less then max key at least M2 in Assocs;
    when Map = cons P Assocs then max key at least M1 in Assocs;
    default M1.

max key in Map is
    when Map = cons M1 Assocs then just (max key at least M1 in Map);
    default nothing.

min key no more than M1 in Map is
    when Map = cons M2 Assocs, compare keys M2 to M1 = less then min key no more than M2 in Assocs;
    when Map = cons P Assocs then min key no more than M1 in Assocs;
    default M1.

min key in Map is
    when Map = cons M1 Assocs then just (min key no more than M1 in Map);
    default nothing.

max value at least M1 in Map is
    when Map = cons M2 Assocs, compare values M2 to M1 = less then max value at least M2 in Assocs;
    when Map = cons P Assocs then max value at least M1 in Assocs;
    default M1.

max value in Map is
    when Map = cons M1 Assocs then just (max value at least M1 in Map);
    default nothing.

min value no more than M1 in Map is
    when Map = cons M2 Assocs, compare values M2 to M1 = less then min value no more than M2 in Assocs;
    when Map = cons P Assocs then min value no more than M1 in Assocs;
    default M1.

min value in Map is
    when Map = cons M1 Assocs then just (min value no more than M1 in Map);
    when Map = empty then nothing.

singleton list X is cons X empty.

init List is
    when List = cons H empty then empty;
    when List = cons H T then cons H (init T);
    when List = empty then empty.

last List is
    when List = cons H empty then just H;
    when List = cons H T then last T;
    when List = empty then nothing.

digit list is cons "0" (cons "1" (cons "2" (cons "3" (cons "4" (cons "5" (cons "6" (cons "7" (cons "8" (cons "9" empty))))))))).

first character of Text is
    Text = Letter .. Rest,
    number of characters in Letter = 1,
    Letter.

first letter of Text is first character of Text.

first digit Digit of Str and Rest where
    when Str = "0" .. Rest then Digit = 0;
    when Str = "1" .. Rest then Digit = 1;
    when Str = "2" .. Rest then Digit = 2;
    when Str = "3" .. Rest then Digit = 3;
    when Str = "4" .. Rest then Digit = 4;
    when Str = "5" .. Rest then Digit = 5;
    when Str = "6" .. Rest then Digit = 6;
    when Str = "7" .. Rest then Digit = 7;
    when Str = "8" .. Rest then Digit = 8;
    when Str = "9" .. Rest then Digit = 9.

digits from Str is
    when first digit Digit of Str and Rest then
        pair Digs and Remaining = digits from Rest,
        pair (prepend Digit to Digs) and Remaining;
    when not(first digit Digit of Str and Rest) then
        pair empty and Str.

A mod B is
    A = Q*B + R,
    0 <= R, R < B,
    R.

X to reversed digits is
    when X < 10 then singleton list X;
    when X >= 10 then prepend (X mod 10) to (X / 10) to reversed digits.

X to digits is reverse list X to reversed digits.

from reversed digit list List is
    when List = cons H T then 10 * from reversed digit list T + H;
    when List = empty then 0.

from digit list List is from reversed digit list (reverse list List).

parse int I from Str and Rest where
    pair Digits and Rest = digits from Str,
    I = from digit list Digits.

parse all F Str is
    call F on Str = pair Res and Rest,
    when Rest = "" then Res;
    when Rest != "" then Res ++ (parse all F Rest).

int from Str is
    parse int I from Str and Rest,
    I.

characters of Text is
    when Text = "" then empty;
    when Text != "" then
        Text = Letter .. Rest,
        number of characters in Letter = 1,
        prepend Letter to characters of Rest.

text from characters in Cs is
    when Cs = cons C Rest then C .. text from characters in Rest;
    default "".

replace X with Y in A is
    when A = X then Y;
    when A != X then A.

text replace X with Y in T is
    text from characters in map (replace X with Y in _) over characters of T.

set of A may be
    empty set |
    {X} has X : A |
    X u Y has X : set of A, Y : set of A.

X element of S if
    when S = {Y} then X = Y;
    when S = A u B then either (_ element of A) or (_ element of B) holds for X.

canonize set S is
    when S = empty set then empty set;
    when S = (empty set) u X then canonize set X;
    when S = X u empty set then canonize set X;
    when S = X u Y then (canonize set X) u (canonize set Y).

